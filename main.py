import tkinter as tk
from tkinter import *
from tkinter import colorchooser

root = tk.Tk()

root.geometry('300x300')
root.title('ColorChooser')

bf=0
def btnFunc():
	global bf
	entry.config(state="normal")
	entry.delete(1,tk.END)

	s = colorchooser.askcolor()
	if bf:
		pass
	else:
		lbl1.pack()
		color.pack(pady=10)
		lbl.pack()
		entry.pack()

		bf=1
	print(s[1])

	if s[1][0] in '#':
		entry.delete(0)

	color.configure(bg=s[1])
	entry.delete(1,tk.END)
	entry.insert(1,s[1])

	entry.config(state="readonly")

lbl = tk.Label(text='HEX:', justify='center')

entry = tk.Entry(justify='center', bg='#a0a0a0')

btn = tk.Button(text = 'Выберите цвет', bg='#fff', command=btnFunc,justify='center',width=20)

lbl1 = tk.Label(text='Цвет который получился:', justify='center')

color = tk.Label(width = 20, justify='center')


btn.pack(pady=10)


entry.config(state="readonly")
icon='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'
root.tk.call('wm', 'iconphoto', root._w, PhotoImage(data=icon))
root.mainloop()
